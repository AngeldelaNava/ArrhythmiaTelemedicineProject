/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Utilities;

import JDBC.JDBCManager;
import Pojos.Doctor;
import Pojos.Patient;
import Pojos.Role;
import Pojos.User;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.SQLException;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author maria
 */
public class ClientMethods {

    private static Scanner sc = new Scanner(System.in);
    private static JDBCManager user;
    private static JDBCManager role;
    private static JDBCManager patient;
    private static JDBCManager doctor;
    public static String trashcan;

    public static void registerDoctor(BufferedReader br, PrintWriter pw, JDBCManager userman, JDBCManager doctorman) {
        try {
            Doctor d = Utilities.Communication.receiveDoctor(br);

            //autogenerate username
            String username = "" + d.getName().charAt(0) + "." + d.getLastName() + "" + Integer.valueOf(d.getLastName().charAt(0));
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U", "w", "3", "0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt(symbols.length);
                sb.append(symbols[indexRandom]);
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            User user = new User(username, password.getBytes(), 2);
            userman.addUser(user);
            user.setId(userman.getId(username));
            userman.createLinkUserRole(2, user.getId());
            Utilities.Communication.sendUser(pw, user);
            doctorman.addDoctor(d);
            d.setDoctorId(doctorman.getId(d.getName()));
            doctorman.createLinkUserDoctor(user.getId(), d.getDoctorId());
            pw.println("Doctor successfully registered");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientMethods.class.getName()).log(Level.SEVERE, null, ex);
            pw.println("Doctor not registered");
        }
    }

    public static void registerPatient(BufferedReader br, PrintWriter pw, JDBCManager userman, JDBCManager patientman, JDBCManager doctorman) throws SQLException {
        try {
            //autogenerate username
            Patient p = Utilities.Communication.receivePatient(br); //receivePatient and doctor deberia devolver un objeto paciente o doctor

            String username = Integer.toString(p.getId());
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U", "w", "3", "0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt(symbols.length);
                sb.append(symbols[indexRandom]);
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            String pass = new String(hash, StandardCharsets.UTF_8);
            User user = new User(username, password.getBytes(), 1);
            userman.addUser(user);
            user.setId(userman.getId(username));
            userman.createLinkUserRole(1, user.getId());
            Utilities.Communication.sendUser(pw, user);
            patientman.addPatient(p);
            patientman.createLinkUserPatient(user.getId(), p.getId());
            pw.println("Patient successfully registered");
            List<Doctor> doctorl = doctorman.selectAllDoctors();
            pw.println(doctorl.size());
            for (int i = 0; i < doctorl.size(); i++) {
                pw.println(doctorl.get(i));
            }
            int doctorid = Integer.parseInt(br.readLine());
            patientman.createLinkDoctorPatient(p.getId(), doctorid);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientMethods.class.getName()).log(Level.SEVERE, null, ex);
            pw.println("Patient not registered");
        } catch (IOException ex) {
            Logger.getLogger(ClientMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static User login(BufferedReader bf, PrintWriter pw, JDBCManager userman) {
        User u = Utilities.Communication.receiveUser(bf);
        String str = new String(u.getPassword(), StandardCharsets.UTF_8);//transform a byte[] in a string;
        //UTF-8,which is a common way to encode Unicode characters into byte sequences
        User user = userman.checkPassword(u.getUsername(), str);
        if (user == null) {
            pw.println("Wrong username or password");
        } else {
            if (u.getUsername().equals(user.getUsername()) && u.getPassword().equals(user.getPassword())) {
                int id = userman.getId(u.getUsername());
                User u2 = userman.selectUserByUserId(id);
                return u2;
            } else {
                pw.println("Wrong username or password");
            }
        }
        return null;
    }

    public static void firstlogin(JDBCManager userman, JDBCManager doctorman, JDBCManager roleman) {
        try {
            String username = "admin";
            String password = "admin";
            Role role = roleman.selectRoleById(2);
            User user = new User(username, password.getBytes(), 2);
            userman.addUser(user);
            user.setId(userman.getId(username));
            userman.createLinkUserRole(role.getId(), user.getId());
            Doctor doctor = new Doctor("admin", "admin", 2);
            doctorman.addDoctor(doctor);
            doctor.setDoctorId(doctorman.getId(doctor.getName()));
            doctorman.createLinkUserDoctor(user.getId(), doctor.getDoctorId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
